# This software is the exclusive property of Gencovery SAS.
# The use and distribution of this software is prohibited without the prior consent of Gencovery SAS.
# About us: https://gencovery.com

import json

import numpy
from gws_core import (BarPlotView, BoxPlotView, ConfigParams, File, Folder,
                      IntParam, LinePlot2DView, MultiViews, StackedBarPlotView,
                      StrParam, StrRField, Table, TableImporter,
                      resource_decorator, view)
from gws_core.extra import TableBoxPlotView, TableView


@resource_decorator("Qiime2RarefactionAnalysisResultFolder",
                    human_name="Qiime2 rarefaction analysis result folder",
                    short_description="Folder containing the files generated by the Qiime2 rarefaction analysis")
class Qiime2RarefactionAnalysisResultFolder(Folder):
    """
    Qiime2RarefactionAnalysisResultFolder Folder file class
    """

    shannon_index_table_path: str = StrRField()
    observed_features_table_path: str = StrRField()

    def _load_table(self, type_: str) -> Table:
        if type_ == "rarefaction_observed":
            file_path = self.get_sub_path("observed_features.for_boxplot.tsv")
        elif type_ == "rarefaction_shannon":
            file_path = self.get_sub_path("shannon.for_boxplot.tsv")

        table = TableImporter.call(File(path=file_path), {'delimiter': 'tab', "index_column": 0, "header": 0})
        colnames = table.column_names
        column_tags = []
        column_names = []
        for name in colnames:
            name = name.replace("'", '"')
            tag: dict = json.loads(name)
            if "x-axis" in tag:
                tag["depth"] = tag["x-axis"]
                del tag["x-axis"]
            column_tags.append(tag)
            column_names.append(str(tag["depth"]) + "#" + tag["sample-id"])

        data = table.get_data()
        data.columns = column_names

        table = Table(data=data)
        table.set_column_tags(column_tags)

        return table

    @view(view_type=TableView, human_name='Rarefaction table',
          short_description='Rarefaction table',
          specs={"type": StrParam(allowed_values=["rarefaction_shannon", "rarefaction_observed"])})
    def view_as_table(self, params: ConfigParams) -> TableView:
        type_ = params["type"]
        table: Table = self._load_table(type_=type_)
        table_view = TableView(table=table)
        return table_view

    @view(view_type=BoxPlotView, human_name='Rarefaction boxplot',
          short_description='Boxplot of the rarefaction table',
          specs={"type": StrParam(allowed_values=["rarefaction_shannon", "rarefaction_observed"])})
    def view_as_boxplot(self, params: ConfigParams) -> BoxPlotView:
        type_ = params["type"]
        table: Table = self._load_table(type_=type_)

        bx_view = BoxPlotView()
        data = table.get_data()
        bx_view.add_data(data=data)
        bx_view.x_label = "depth"
        bx_view.y_label = "shannon index" if type_ == "rarefaction_shannon" else "observed features value"
        return bx_view

    @view(view_type=LinePlot2DView, human_name='Rarefaction lineplot',
          short_description='Lineplot of the rarefaction table',
          specs={"type": StrParam(allowed_values=["rarefaction_shannon", "rarefaction_observed"])})
    def view_as_lineplot(self, params: ConfigParams) -> LinePlot2DView:
        type_ = params["type"]
        table: Table = self._load_table(type_=type_)
        table = table.select_numeric_columns(drop_na='all')

        lp_view = LinePlot2DView()
        #data = table.get_data()
        column_tags = table.get_column_tags()
        all_sample_ids = list(set([tag["sample-id"] for tag in column_tags]))

        for sample_id in all_sample_ids:
            sample_table = table.select_by_column_tags([{"sample-id": sample_id}])
            sample_column_tags = sample_table.get_column_tags()
            positions = [float(tag["depth"]) for tag in sample_column_tags]

            sample_data = sample_table.get_data()
            quantile = numpy.nanquantile(sample_data.to_numpy(), q=[0.25, 0.5, 0.75], axis=0)
            median = quantile[1, :].tolist()
            lp_view.add_series(x=positions, y=median, tags=sample_column_tags)

        lp_view.x_label = "depth"
        lp_view.y_label = "shannon index" if type_ == "rarefaction_shannon" else "observed features value"
        return lp_view
